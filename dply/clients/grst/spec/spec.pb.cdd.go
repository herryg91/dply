// Code generated by protoc-gen-cdd. DO NOT EDIT.
// source: spec.proto
package spec

import (
	"net/http"
	"strings"

	"github.com/herryg91/cdd/grst"
	grst_errors "github.com/herryg91/cdd/grst/errors"
	"google.golang.org/grpc"

	"github.com/mcuadros/go-defaults"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/credentials"
	"gopkg.in/validator.v2"
)

type fullMethods struct {
	SpecApi_GetEnvar       string
	SpecApi_UpsertEnvar    string
	SpecApi_GetScale       string
	SpecApi_UpsertScale    string
	SpecApi_GetPort        string
	SpecApi_UpsertPort     string
	SpecApi_GetAffinity    string
	SpecApi_UpsertAffinity string
}

var FullMethods = fullMethods{
	SpecApi_GetEnvar:       "/spec.SpecApi/GetEnvar",
	SpecApi_UpsertEnvar:    "/spec.SpecApi/UpsertEnvar",
	SpecApi_GetScale:       "/spec.SpecApi/GetScale",
	SpecApi_UpsertScale:    "/spec.SpecApi/UpsertScale",
	SpecApi_GetPort:        "/spec.SpecApi/GetPort",
	SpecApi_UpsertPort:     "/spec.SpecApi/UpsertPort",
	SpecApi_GetAffinity:    "/spec.SpecApi/GetAffinity",
	SpecApi_UpsertAffinity: "/spec.SpecApi/UpsertAffinity",
}

var NeedAuthFullMethods = []string{}

var NeedApiKeyFullMethods = []string{}

func ValidateRequest(req interface{}) error {
	defaults.SetDefaults(req)
	if errs := validator.Validate(req); errs != nil {
		validateError := []*grst_errors.ErrorDetail{}
		for field, err := range errs.(validator.ErrorMap) {
			errMessage := strings.Replace(err.Error(), "{field}", field, -1)
			validateError = append(validateError, &grst_errors.ErrorDetail{Code: 999, Field: field, Message: errMessage})
		}
		return grst_errors.New(http.StatusBadRequest, codes.InvalidArgument, 999, "Validation Error", validateError...)
	}

	return nil
}

/*==================== SpecApi Section ====================*/

func RegisterSpecApiGrstServer(grpcRestServer *grst.Server, hndl SpecApiServer) {

	forward_SpecApi_GetEnvar_0 = grpcRestServer.GetForwardResponseMessage()

	forward_SpecApi_UpsertEnvar_0 = grpcRestServer.GetForwardResponseMessage()

	forward_SpecApi_GetScale_0 = grpcRestServer.GetForwardResponseMessage()

	forward_SpecApi_UpsertScale_0 = grpcRestServer.GetForwardResponseMessage()

	forward_SpecApi_GetPort_0 = grpcRestServer.GetForwardResponseMessage()

	forward_SpecApi_UpsertPort_0 = grpcRestServer.GetForwardResponseMessage()

	forward_SpecApi_GetAffinity_0 = grpcRestServer.GetForwardResponseMessage()

	forward_SpecApi_UpsertAffinity_0 = grpcRestServer.GetForwardResponseMessage()

	RegisterSpecApiServer(grpcRestServer.GetGrpcServer(), hndl)
	grpcRestServer.RegisterRestHandler(RegisterSpecApiHandler)
}

func NewSpecApiGrstClient(serverHost string, creds *credentials.TransportCredentials, dialOpts ...grpc.DialOption) (SpecApiClient, error) {
	opts := []grpc.DialOption{}
	opts = append(opts, grpc.WithDefaultCallOptions(grpc.MaxCallRecvMsgSize(1024*1024*20)))
	opts = append(opts, grpc.WithMaxMsgSize(1024*1024*20))
	if creds == nil {
		opts = append(opts, grpc.WithInsecure())
	} else {
		opts = append(opts, grpc.WithTransportCredentials(*creds))
	}
	opts = append(opts, dialOpts...)
	grpcConn, err := grpc.Dial(serverHost, opts...)
	return NewSpecApiClient(grpcConn), err
}
