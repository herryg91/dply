// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package project

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ProjectApiClient is the client API for ProjectApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectApiClient interface {
	GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Projects, error)
	Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*empty.Empty, error)
}

type projectApiClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectApiClient(cc grpc.ClientConnInterface) ProjectApiClient {
	return &projectApiClient{cc}
}

func (c *projectApiClient) GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Projects, error) {
	out := new(Projects)
	err := c.cc.Invoke(ctx, "/project.ProjectApi/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectApiClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/project.ProjectApi/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectApiClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/project.ProjectApi/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectApiServer is the server API for ProjectApi service.
// All implementations must embed UnimplementedProjectApiServer
// for forward compatibility
type ProjectApiServer interface {
	GetAll(context.Context, *empty.Empty) (*Projects, error)
	Create(context.Context, *CreateReq) (*empty.Empty, error)
	Delete(context.Context, *DeleteReq) (*empty.Empty, error)
	mustEmbedUnimplementedProjectApiServer()
}

// UnimplementedProjectApiServer must be embedded to have forward compatible implementations.
type UnimplementedProjectApiServer struct {
}

func (UnimplementedProjectApiServer) GetAll(context.Context, *empty.Empty) (*Projects, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedProjectApiServer) Create(context.Context, *CreateReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProjectApiServer) Delete(context.Context, *DeleteReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedProjectApiServer) mustEmbedUnimplementedProjectApiServer() {}

// UnsafeProjectApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectApiServer will
// result in compilation errors.
type UnsafeProjectApiServer interface {
	mustEmbedUnimplementedProjectApiServer()
}

func RegisterProjectApiServer(s *grpc.Server, srv ProjectApiServer) {
	s.RegisterService(&_ProjectApi_serviceDesc, srv)
}

func _ProjectApi_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectApiServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.ProjectApi/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectApiServer).GetAll(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectApi_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectApiServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.ProjectApi/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectApiServer).Create(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectApi_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectApiServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.ProjectApi/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectApiServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProjectApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "project.ProjectApi",
	HandlerType: (*ProjectApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _ProjectApi_GetAll_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ProjectApi_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ProjectApi_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "project.proto",
}
