// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package image

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ImageApiClient is the client API for ImageApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageApiClient interface {
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*Images, error)
	Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*empty.Empty, error)
}

type imageApiClient struct {
	cc grpc.ClientConnInterface
}

func NewImageApiClient(cc grpc.ClientConnInterface) ImageApiClient {
	return &imageApiClient{cc}
}

func (c *imageApiClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*Images, error) {
	out := new(Images)
	err := c.cc.Invoke(ctx, "/image.ImageApi/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageApiClient) Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/image.ImageApi/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageApiServer is the server API for ImageApi service.
// All implementations must embed UnimplementedImageApiServer
// for forward compatibility
type ImageApiServer interface {
	Get(context.Context, *GetReq) (*Images, error)
	Add(context.Context, *AddReq) (*empty.Empty, error)
	mustEmbedUnimplementedImageApiServer()
}

// UnimplementedImageApiServer must be embedded to have forward compatible implementations.
type UnimplementedImageApiServer struct {
}

func (UnimplementedImageApiServer) Get(context.Context, *GetReq) (*Images, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedImageApiServer) Add(context.Context, *AddReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedImageApiServer) mustEmbedUnimplementedImageApiServer() {}

// UnsafeImageApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageApiServer will
// result in compilation errors.
type UnsafeImageApiServer interface {
	mustEmbedUnimplementedImageApiServer()
}

func RegisterImageApiServer(s *grpc.Server, srv ImageApiServer) {
	s.RegisterService(&_ImageApi_serviceDesc, srv)
}

func _ImageApi_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageApiServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image.ImageApi/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageApiServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageApi_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageApiServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image.ImageApi/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageApiServer).Add(ctx, req.(*AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImageApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "image.ImageApi",
	HandlerType: (*ImageApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ImageApi_Get_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _ImageApi_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "image.proto",
}
